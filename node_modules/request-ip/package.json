{
  "_from": "request-ip",
  "_id": "request-ip@2.1.1",
  "_inBundle": false,
  "_integrity": "sha512-cxNIoWf9JDuZM6YKdfTWdRsOi/hI4eIG6rGeodFyo8cCnTePoTW4qYbcKkQUz6evJkVXw+y0++BDz+Dh78M1pQ==",
  "_location": "/request-ip",
  "_phantomChildren": {},
  "_requested": {
<<<<<<< HEAD
    "escapedName": "request-ip",
    "fetchSpec": "latest",
    "name": "request-ip",
    "raw": "request-ip",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
=======
    "type": "tag",
    "registry": true,
    "raw": "request-ip",
    "name": "request-ip",
    "escapedName": "request-ip",
    "rawSpec": "",
    "saveSpec": null,
    "fetchSpec": "latest"
>>>>>>> 9cd13028184df382dc81fd1eea0a55e58f959e88
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/request-ip/-/request-ip-2.1.1.tgz",
  "_shasum": "99be3b1595c574d7a3fe1eb4eb83a6b59a76edae",
  "_spec": "request-ip",
  "_where": "D:\\member-server\\member-api",
  "author": {
<<<<<<< HEAD
    "email": "petarbojinov@gmail.com",
    "name": "Petar Bojinov"
=======
    "name": "Petar Bojinov",
    "email": "petarbojinov@gmail.com"
>>>>>>> 9cd13028184df382dc81fd1eea0a55e58f959e88
  },
  "bugs": {
    "url": "https://github.com/pbojinov/request-ip/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Jon Peck",
      "email": "jpeck@fluxsauce.com"
    }
  ],
  "dependencies": {
    "is_js": "^0.9.0"
  },
  "deprecated": false,
  "description": "A small node.js module to retrieve the request's IP address",
  "devDependencies": {
    "@babel/cli": "^7.0.0-beta.51",
    "@babel/core": "^7.0.0-beta.51",
    "@babel/preset-env": "^7.0.0-beta.51",
    "coveralls": "^2.11.2",
    "eslint": "^3.17.0",
    "eslint-config-airbnb-base": "^11.1.1",
    "eslint-plugin-import": "^2.2.0",
    "nyc": "^12.0.2",
    "request": "^2.54.0",
    "tap-spec": "^5.0.0",
    "tape": "^4.9.1"
  },
  "homepage": "https://github.com/pbojinov/request-ip",
  "keywords": [
<<<<<<< HEAD
    "X-Client-IP",
    "X-Forwarded-For",
    "X-Real-IP",
    "address",
    "client",
    "connection.remoteAddress",
    "header",
    "ip",
    "ipv4",
    "ipv6",
    "middleware",
    "proxy",
    "request",
    "request ip"
=======
    "request ip",
    "ip",
    "address",
    "request",
    "proxy",
    "client",
    "header",
    "X-Real-IP",
    "X-Client-IP",
    "X-Forwarded-For",
    "connection.remoteAddress",
    "middleware",
    "ipv4",
    "ipv6"
>>>>>>> 9cd13028184df382dc81fd1eea0a55e58f959e88
  ],
  "license": "MIT",
  "main": "./dist/index.js",
  "name": "request-ip",
<<<<<<< HEAD
  "optionalDependencies": {},
  "readme": "# request-ip\n\nA tiny Node.js module for retrieving a request's IP address. \n\n![](https://nodei.co/npm/request-ip.png?downloads=true&cacheBust=2)\n\n![](https://travis-ci.org/pbojinov/request-ip.svg?branch=master)\n[![Coverage Status](https://coveralls.io/repos/pbojinov/request-ip/badge.svg)](https://coveralls.io/r/pbojinov/request-ip)\n![](https://img.shields.io/npm/l/express.svg)\n[![npm version](https://badge.fury.io/js/request-ip.svg)](https://badge.fury.io/js/request-ip)\n\n## Installation\n\n```bash\nnpm install request-ip --save\n```\n    \n## Getting Started\n\n```javascript\nconst requestIp = require('request-ip');\n\n// inside middleware handler\nconst ipMiddleware = function(req, res, next) {\n    const clientIp = requestIp.getClientIp(req); \n    next();\n};\n\n// on localhost you'll see 127.0.0.1 if you're using IPv4 \n// or ::1, ::ffff:127.0.0.1 if you're using IPv6\n```\n\n### As Connect Middleware\n\n```javascript\nconst requestIp = require('request-ip');\napp.use(requestIp.mw())\n\napp.use(function(req, res) {\n    const ip = req.clientIp;\n    res.end(ip);\n});\n```\n\nTo see a full working code for the middleware, check out the [examples](https://github.com/pbojinov/request-ip/tree/master/examples) folder.\n\nThe connect-middleware also supports retrieving the ip address under a custom attribute name, which also works as a container for any future settings. \n\n## How It Works\n\nIt looks for specific headers in the request and falls back to some defaults if they do not exist.\n\nThe following is the order we use to determine the user ip from the request.\n\n1. `X-Client-IP`  \n2. `X-Forwarded-For` (Header may return multiple IP addresses in the format: \"client IP, proxy 1 IP, proxy 2 IP\", so we take the the first one.)\n3. `CF-Connecting-IP` (Cloudflare)\n4. `True-Client-Ip` (Akamai and Cloudflare)\n5. `X-Real-IP` (Nginx proxy/FastCGI)\n6. `X-Cluster-Client-IP` (Rackspace LB, Riverbed Stingray)\n7. `X-Forwarded`, `Forwarded-For` and `Forwarded` (Variations of #2)\n8. `req.connection.remoteAddress`\n9. `req.socket.remoteAddress`\n10. `req.connection.socket.remoteAddress`\n11. `req.info.remoteAddress`\n\nIf an IP address cannot be found, it will return `null`.\n\n## Samples Use Cases\n\n* Getting a user's IP for geolocation.\n\n\n## Running the Tests\n\nMake sure you have the necessary dev dependencies needed to run the tests:\n\n```\nnpm install\n```\n\nRun the integration tests\n\n```\nnpm test\n```\n\n## Release Notes\n\nSee the wonderful [changelog](https://github.com/pbojinov/request-ip/blob/master/CHANGELOG.md)\n\nTo easily generate a new changelog, install [github-changelog-generator](https://github.com/skywinder/github-changelog-generator) then run `npm run changelog`.\n\n## Contributors\n\n* Thanks to [@osherx](https://github.com/osherx) for adding the connect-middleware.\n* Thanks to [@raunc](https://github.com/raunc) for adding Squid proxy support.\n* Thanks to [@fluxsauce](https://github.com/fluxsauce) for adding `CF-Connecting-IP`, `True-Client-IP`, and ES6 support.\n\n## License\n\nThe MIT License (MIT) - 2017\n",
  "readmeFilename": "README.md",
=======
>>>>>>> 9cd13028184df382dc81fd1eea0a55e58f959e88
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pbojinov/request-ip.git"
  },
  "scripts": {
    "build": "babel ./src/index.js > ./dist/index.js",
    "changelog": "github_changelog_generator -u pbojinov -p request-ip",
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "test": "nyc --reporter=html --reporter=text --check-coverage --lines=100 --statements=100 ./node_modules/tape/bin/tape ./test/index.js"
  },
  "version": "2.1.1"
}
