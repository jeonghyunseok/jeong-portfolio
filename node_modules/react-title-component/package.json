{
  "_from": "react-title-component",
  "_id": "react-title-component@1.0.1",
  "_inBundle": false,
  "_integrity": "sha1-z9UUGPRui9QrsBxszKtRuuoPVwA=",
  "_location": "/react-title-component",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-title-component",
    "fetchSpec": "latest",
    "name": "react-title-component",
    "raw": "react-title-component",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-title-component/-/react-title-component-1.0.1.tgz",
  "_shasum": "cfd51418f46e8bd42bb01c6cccab51baea0f5700",
  "_spec": "react-title-component",
  "_where": "C:\\Users\\lucid\\vrware_school",
  "authors": [
    "Ryan Florence"
  ],
  "bugs": {
    "url": "https://github.com/ryanflorence/react-title-component/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Nested document title management for React.js",
  "devDependencies": {
    "babel": "^5.4.7",
    "babel-core": "^5.4.7",
    "babel-eslint": "^4.1.6",
    "babel-loader": "^5.0.0",
    "babel-plugin-dev-expression": "^0.1.0",
    "bundle-loader": "^0.5.2",
    "codecov.io": "^0.1.6",
    "coveralls": "^2.11.4",
    "css-loader": "^0.19.0",
    "eslint": "^1.7.3",
    "eslint-config-rackt": "^1.1.0",
    "eslint-plugin-react": "^3.6.3",
    "expect": "^1.12.0",
    "express": "^4.13.3",
    "express-urlrewrite": "^1.2.0",
    "gzip-size": "^3.0.0",
    "isparta-loader": "^1.0.0",
    "karma": "^0.13.13",
    "karma-browserstack-launcher": "^0.1.4",
    "karma-chrome-launcher": "^0.2.0",
    "karma-coverage": "^0.5.3",
    "karma-mocha": "^0.2.0",
    "karma-mocha-reporter": "^1.1.1",
    "karma-sourcemap-loader": "^0.3.5",
    "karma-webpack": "^1.7.0",
    "mocha": "^2.0.1",
    "pretty-bytes": "^2.0.1",
    "react": "^0.14.0",
    "react-addons-test-utils": "0.14.0",
    "react-dom": "^0.14.0",
    "rimraf": "^2.4.3",
    "style-loader": "^0.12.4",
    "webpack": "^1.4.13",
    "webpack-dev-middleware": "^1.2.0"
  },
  "files": [
    "*.md",
    "docs",
    "es6",
    "lib",
    "modules/*.js",
    "npm-scripts",
    "umd"
  ],
  "homepage": "https://github.com/ryanflorence/react-title-component",
  "jsnext:main": "es6/Title",
  "keywords": [
    "react",
    "react-component",
    "title"
  ],
  "license": "MIT",
  "main": "lib/Title",
  "name": "react-title-component",
  "optionalDependencies": {},
  "readme": "React Title Component\n=====================\n\nNested document title management for React.\n\n### Installation\n\nUsing [npm](https://www.npmjs.com/):\n\n    $ npm install react-title-component\n\nThen with a module bundler like [webpack](https://webpack.github.io/) that supports either CommonJS or ES2015 modules, use as you would anything else:\n\n```js\n// using an ES6 transpiler, like babel\nimport Title, { flushTitle } from 'react-title-component'\n\n// not using an ES6 transpiler\nvar ReactTitle = require('react-title-component')\nvar Title = ReactTitle.default\nvar flushTitle = ReactTitle.flushTitle\n```\n\nThe UMD build is also available on [npmcdn](https://npmcdn.com):\n\n```html\n<script src=\"https://npmcdn.com/react-title-component/umd/ReactTitleComponent.min.js\"></script>\n```\n\nYou can find the library on `window.ReactTitle`.\n\n### Usage\n\n```js\n<Title render=\"My Title\"/>\n// `document.title` will now be \"My Title\"\n```\n\nThat's nice, but the idea is that you don't want just one component\nparticipating in the title of the document. As nested components come in\nand out of the UI, you often want to append (or prepend) to the current\ntitle.\n\n```js\n// First instance of `Title`\n<Title render=\"My Title\"/>\n\n// Lower in the view hierarchy, another `Title` is rendered.\n// If you pass it a function you'll get the previous title's value,\n// so you can append, prepend, or ignore it.\n<Title render={previousTitle => `${previousTitle} - More Title`}/>\n\n// the title, if both of those are rendered, will be:\n// \"My Title - More Title\"\n```\n\nIt ends up looking something like this:\n\n```js\nimport React from 'react'\nimport { render } from 'react-dom'\nimport Title from 'react-title-component'\n\nconst App = React.createClass({\n\n  render() {\n    return (\n      <div>\n        <Title render=\"Awesome Website\"/>\n        <DeeperPage/>\n        {/* ... */}\n      </div>\n    )\n  }\n\n})\n\nconst DeeperPage = React.createClass({\n\n  getInitialState() {\n    return { profile: null }\n  },\n\n  componentDidMount() {\n    fetchProfile(profile => this.setState({ profile }))\n  },\n\n  render() {\n    // because it's a component, it gets to participate in the render\n    // lifecycle, updating the title as state changes...\n    const { profile } = this.state\n    const title = profile ? 'Loading...' : profile.fullName\n    return (\n      <div>\n        <Title render={parentTitle => `More Stuff | ${title}`}/>\n        {/* ... */}\n      </div>\n    )\n  }\n\n})\n```\n\nIf you're using React Router, you probably want all of your route\ncomponents to add something to the title.\n\n### Server Rendering\n\n```js\nimport { flushTitle } from 'react-title-component'\nimport { renderToString } from 'react-dom/server'\n\nconst markup = renderToString(<App/>) // App has some Titles in it.\nconst title = flushTitle() // returns the title and gets ready for the\n                           // next request\n\nrenderFullPageHoweverYouDoIt(markup, title)\n```\n\n### Caveat\n\nThere is one caveat: You can't be removing titles from the middle of the\nchain.  In other words, make sure that if your component renders a\n`Title`, it always renders a Title.\n\n```js\n// GOOD\nrender() {\n  return (\n    <div>\n      <Title render={prev => `${prev} | stuff`}/>\n    </div>\n  )\n}\n\n// BAD\nrender() {\n  return (\n    <div>\n      {!this.state.screwUpTheTitleLib && (\n        <Title render={prev => `${prev} | stuff`}/>\n      )}\n    </div>\n  )\n}\n```\n\nThis could cause a title in the middle of the \"title chain\" to be\nremoved and then screw everything else up, the code makes assumptions\nbased on the order they get rendered.\n\nThis could be worked around, but it seems like a strange use-case that\nwould complicate the code a bit.\n\nEnjoy!\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ryanflorence/react-title-component.git"
  },
  "scripts": {
    "build": "npm run build-cjs && npm run build-es6",
    "build-cjs": "rimraf lib && babel ./modules -d lib --ignore '__tests__'",
    "build-es6": "rimraf es6 && babel ./modules -d es6 --blacklist=es6.modules --ignore '__tests__'",
    "build-min": "NODE_ENV=production webpack -p modules/Title.js umd/ReactTitleComponent.min.js",
    "build-umd": "NODE_ENV=production webpack modules/Title.js umd/ReactTitleComponent.js",
    "lint": "eslint modules examples",
    "start": "node examples/server.js",
    "test": "npm run lint && karma start"
  },
  "tags": [
    "react",
    "title"
  ],
  "version": "1.0.1"
}
